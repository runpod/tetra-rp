syntax = "proto3";

package tetra;

// The remote execution service definition
service RemoteExecutor {
  // Execute a function or class method remotely
  rpc ExecuteFunction (FunctionRequest) returns (FunctionResponse) {}
}

// The request message containing function/class details and arguments
message FunctionRequest {
  optional string function_name = 1;       // Name of the function to execute
  optional string function_code = 2;       // Source code of the function to execute
  repeated string args = 3;                // Base64-encoded cloudpickle-serialized positional arguments
  map<string, string> kwargs = 4;         // Base64-encoded cloudpickle-serialized keyword arguments
  repeated string dependencies = 5;        // Optional list of pip packages to install before execution
  repeated string system_dependencies = 6; // Optional list of system dependencies to install before execution

  string execution_type = 7;               // Type of execution: 'function' or 'class'
  optional string class_name = 8;          // Name of the class to instantiate (for class execution)
  optional string class_code = 9;          // Source code of the class to instantiate (for class execution)
  repeated string constructor_args = 10;   // Base64-encoded cloudpickle-serialized constructor arguments
  map<string, string> constructor_kwargs = 11; // Base64-encoded cloudpickle-serialized constructor keyword arguments
  string method_name = 12;                 // Name of the method to call on the class instance (default: "__call__")
  optional string instance_id = 13;        // Unique identifier for the class instance (for persistence)
  bool create_new_instance = 14;           // Whether to create a new instance or reuse existing one
}

// The response message containing the execution result or error
message FunctionResponse {
  bool success = 1;                        // Whether execution was successful
  optional string result = 2;              // Base64-encoded cloudpickle-serialized result (if success)
  optional string error = 3;               // Error message (if not success)
  optional string stdout = 4;              // Captured standard output from the function execution

  optional string instance_id = 5;         // ID of the class instance that was used/created
  map<string, string> instance_info = 6;   // Metadata about the class instance (creation time, call count, etc.)
}