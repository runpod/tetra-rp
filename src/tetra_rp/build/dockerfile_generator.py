"""
Dockerfile generation for production builds.

Generates Dockerfiles with base image, dependencies, and baked code.
"""

import logging
from dataclasses import dataclass
from typing import List

log = logging.getLogger(__name__)


@dataclass
class DockerfileConfig:
    """Configuration for Dockerfile generation."""

    worker_base_image: str
    callable_name: str
    dependencies: List[str]
    system_dependencies: List[str]


class DockerfileGenerator:
    """Generate Dockerfiles for production images."""

    def generate(self, config: DockerfileConfig) -> str:
        """
        Generate Dockerfile content.

        Args:
            config: Dockerfile configuration

        Returns:
            Complete Dockerfile as string
        """
        log.debug(
            f"Generating Dockerfile for {config.callable_name} "
            f"(base: {config.worker_base_image})"
        )

        dockerfile = self._generate_header(config)
        dockerfile += self._generate_system_deps(config)
        dockerfile += self._generate_python_deps(config)
        dockerfile += self._generate_baked_code_section()

        return dockerfile

    def _generate_header(self, config: DockerfileConfig) -> str:
        """Generate Dockerfile header with FROM and WORKDIR."""
        return f"""# Production image for {config.callable_name}
# Auto-generated by Tetra

FROM {config.worker_base_image}

WORKDIR /app

"""

    def _generate_system_deps(self, config: DockerfileConfig) -> str:
        """Generate system dependencies installation section."""
        if not config.system_dependencies:
            return ""

        dockerfile = "# Install system dependencies\n"
        dockerfile += "RUN apt-get update && apt-get install -y \\\n"
        for dep in config.system_dependencies:
            dockerfile += f"    {dep} \\\n"
        dockerfile += "    && rm -rf /var/lib/apt/lists/*\n\n"

        return dockerfile

    def _generate_python_deps(self, config: DockerfileConfig) -> str:
        """Generate Python dependencies installation section."""
        if not config.dependencies:
            return ""

        dockerfile = "# Install Python dependencies\n"
        for dep in config.dependencies:
            dockerfile += f"RUN uv pip install {dep}\n"
        dockerfile += "\n"

        return dockerfile

    def _generate_baked_code_section(self) -> str:
        """Generate section that copies baked code and sets environment."""
        return """# Copy baked code
COPY baked_code/ /app/baked_code/

# Enable baked mode
ENV TETRA_BAKED_MODE=true
"""
